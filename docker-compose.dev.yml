version: '3.3'
services:
  workflow-frontend:
    image: node:16
    ports:
      - "3000:3000"
    working_dir: /src
    networks:
      - app-network
    environment:
      HOST: 0.0.0.0
    command: bash -c "npm install -f && npm start"
    volumes:
      - "./workflow-frontend:/src"
      - "/src/node_modules"

  workflow-api-users:
    image: node:16
    ports:
      - "4000:4000"
    working_dir: /src
    networks:
      - app-network
    environment:
      DATABASE_HOST: workflow-db-users
      DATABASE_PORT: 5432
      DATABASE_USERNAME: admin
      DATABASE_PASSWORD: root
      DATABASE_NAME: users
    command: bash -c "npm install -f && npm start"
    depends_on:
        - workflow-db-users
    volumes:
      - "./workflow-api-users:/src"
      - "/src/node_modules"

#  workflow-db-users:
#    image: postgres:alpine
#    restart: always
#    environment:
#      POSTGRES_USER: root
#      POSTGRES_PASSWORD: root
#      POSTGRES_DB: users
#    ports:
#      - "5432:5432"
#    volumes:
#      - ./workflow-api-users/_data/postgres:/var/lib/postgresql/data
  workflow-db-users:
    image: kartoza/postgis:14-3.1
    volumes:
      - workflow-db-users:/var/lib/postgresql
      - workflow-db-users_data:/var/lib/postgresql/data
    ports:
      - 25432:5432
    restart: on-failure
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASS=root
      - POSTGRES_DB=users
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
    networks:
      - app-network

  workflow-pgadmin-users:
    image: dpage/pgadmin4
    logging:
      driver: none
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - workflow-pgadmin-users:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - app-network

#        For backend:
#        - AWS_ACCESS_KEY_ID=minio
#        - AWS_SECRET_ACCESS_KEY=minio123
#        - AWS_BUCKET=bucket
#        - AWS_ENDPOINT=http://minio:9000




  minio:
    image: docker.io/bitnami/minio:2022
    ports:
      - '9001:9001'
    volumes:
      - 'minio_data:/data'
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
      - MINIO_DEFAULT_BUCKETS=bucket:policy
    networks:
      - app-network

  redis:
    container_name: redis
    hostname: redis
    image: redis
    volumes:
      - ./redis-data:/data
    networks:
      - redis_network

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    build: .
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - '8081:8081'
    depends_on:
      - redis
    networks:
      - redis_network


  zookeeper:
    image: zookeeper:3.4.9
    restart: unless-stopped
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - ./zookeeper/data:/data
      - ./zookeeper/datalog:/datalog

  kafka:
    image: confluentinc/cp-kafka:5.2.1
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./kafka/data:/var/lib/kafka/data
    depends_on:
      - zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:19092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - "kafka"



networks:
  app-network:
    driver: bridge
  redis_network:
    driver: bridge

volumes:
  dbdata:
  redis-data:
  pgadmin:
  minio_data:
  kafka:
  zookeeper:
  workflow-db-users_data:
  workflow-db-users:
  workflow-pgadmin-users:
  workflow-api-users: